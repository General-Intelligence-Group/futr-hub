---

####################################
#### LOG IN IDENTITY PROVIDER   ####
####################################


- name: Login into APIM management API using IDM provider
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/realms/platform-central/protocol/openid-connect/token"
    return_content: yes
    body_format: form-urlencoded
    body:
    - [ grant_type, "password" ]
    - [ username, "admin@{{ DOMAIN }}" ]
    - [ password, "{{ SC_ADMIN_PASSWORD }}" ]
    - [ client_id, "platform-central-main" ]
    - [ client_secret, "{{ IDM_CLIENT_SECRET }}" ]
    headers:
      Accept: application/json
    status_code: 200
  register: user


- name: Exchange token at APIM
  uri:
    method: POST
    url: "https://api.{{ DOMAIN }}/management/organizations/DEFAULT/environments/DEFAULT/auth/oauth2/keycloak/exchange?token={{ user.json.access_token }}"
    return_content: yes
    headers:
      Accept: application/json
    status_code: 200
  register: new_token


- name: Get IDM user id
  uri:
    method: GET
    url: "https://api.{{ DOMAIN }}/management/organizations/DEFAULT/user"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ new_token.json.token }}
    status_code: 200
  register: idm_user_id


#####################################
### Create FROST Server API Entry ###
#####################################

- name: Create FROST API Entry
  uri:
    method: POST
    url: "https://api.{{ DOMAIN }}/management/organizations/DEFAULT/environments/DEFAULT/apis/import"
    return_content: yes
    body_format: json
    body: |
      {
        "proxy": {
          "endpoints": [
            {
              "name":"default",
              "target":"{{ frost_api_endpoint }}",
              "inherit":true
            }
          ],
          "context_path":"{{ frost_api_publicPath }}"
        },
        "pages":[],
        "plans":[],
        "tags":[],
        "name":"FROST Test",
        "version":"1.1",
        "description":"Test"
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ new_token.json.token }}
    status_code: 200,400
  register: frostAPI

- debug:
    msg: "Failed. FROST API already existing?"
  when: frostAPI.status == 400

- name: Update to final Values
  uri:
    method: PUT
    url: "https://api.{{ DOMAIN }}/management/organizations/DEFAULT/environments/DEFAULT/apis/{{ frostAPI.json.id }}"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'gravitee/frost_server.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ new_token.json.token }}
    status_code: 200
  when: frostAPI.status != 400

- name: Create Subscription Plan based on API Keys
  uri:
    method: POST
    url: "https://api.{{ DOMAIN }}/management/organizations/DEFAULT/environments/DEFAULT/apis/{{ frostAPI.json.id }}/plans"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'gravitee/create_plan_api_key.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ new_token.json.token }}
    status_code: 201
  when: frostAPI.status != 400

- name: Start the API
  uri:
    method: POST
    url: "https://api.{{ DOMAIN }}/management/organizations/DEFAULT/environments/DEFAULT/apis/{{ frostAPI.json.id }}?action=START"
    return_content: yes
    headers:
      Authorization: Bearer {{ new_token.json.token }}
    status_code: 204
  when: frostAPI.status != 400
