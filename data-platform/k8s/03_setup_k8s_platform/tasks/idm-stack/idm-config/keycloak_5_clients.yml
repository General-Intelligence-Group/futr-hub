- name: Re-Login to keycloak
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/realms/master/protocol/openid-connect/token"
    return_content: yes
    body_format: form-urlencoded
    body:
        grant_type: "password"
        client_id: "admin-cli"
        username: "{{ ADMIN_USERNAME }}"
        password: "{{ ADMIN_PASSWORD }}"
    status_code: 200
  register: keycloak_login

- name: Create API Access Client
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/clients/api-access.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: client_api_access_response

- name: Check if already existing.
  debug:
    msg: "Failed. Client may already exist."
  when: client_api_access_response.status == 409

- name: Create Grafana Client
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/clients/grafana.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: client_grafana_response

- name: Check if already existing.
  debug:
    msg: "Failed. Client may already exist."
  when: client_grafana_response.status == 409

- name: Create Gravitee Client
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/clients/gravitee.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: client_gravitee_response

- name: Check if already existing.
  debug:
    msg: "Failed. Client may already exist."
  when: client_gravitee_response.status == 409

- name: Create Admin Tools Client
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/clients/admin_tools.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: client_admin_tools_response

- name: Check if already existing.
  debug:
    msg: "Failed. Client may already exist."
  when: client_admin_tools_response.status == 409

- name: Create Masterportal Client
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/clients/masterportal.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: client_masterportal_response

- name: Check if already existing.
  debug:
    msg: "Failed. Client may already exist."
  when: client_masterportal_response.status == 409

- name: Create CKAN Client
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/clients/ckan.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: client_ckan_response

- name: Check if already existing.
  debug:
    msg: "Failed. Client may already exist."
  when: client_ckan_response.status == 409

- name: Create MINIO Client
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/clients/minio.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: client_minio_response

- name: Check if already existing.
  debug:
    msg: "Failed. Client may already exist."
  when: client_minio_response.status == 409

# Retrieve id and secret for all clients

- name: Get clients
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: clients

- name: "Get keycloak client API Access ID."
  set_fact:
    client_id_api_access: "{{ clients.json | json_query(query) }}"
  vars:
    query: "[?clientId== '{{ IDM_CLIENT_API_ACCESS }}'].id | [0]"

- name: "Get keycloak client Grafana ID."
  set_fact:
    client_id_grafana: "{{ clients.json | json_query(query) }}"
  vars:
    query: "[?clientId== '{{ IDM_CLIENT_GRAFANA }}'].id | [0]"

- name: "Get keycloak client Gravitee ID."
  set_fact:
    client_id_gravitee: "{{ clients.json | json_query(query) }}"
  vars:
    query: "[?clientId== '{{ IDM_CLIENT_GRAVITEE }}'].id | [0]"

- name: "Get keycloak client Admin Tools ID."
  set_fact:
    client_id_admin_tools: "{{ clients.json | json_query(query) }}"
  vars:
    query: "[?clientId== '{{ IDM_CLIENT_ADMIN_TOOLS }}'].id | [0]"

- name: "Get keycloak client Masterportal ID."
  set_fact:
    client_id_masterportal: "{{ clients.json | json_query(query) }}"
  vars:
    query: "[?clientId== '{{ IDM_CLIENT_MASTERPORTAL }}'].id | [0]"

- name: "Get keycloak client CKAN ID."
  set_fact:
    client_id_ckan: "{{ clients.json | json_query(query) }}"
  vars:
    query: "[?clientId== '{{ IDM_CLIENT_CKAN }}'].id | [0]"   

- name: "Get keycloak client MINIO ID."
  set_fact:
    client_id_minio: "{{ clients.json | json_query(query) }}"
  vars:
    query: "[?clientId== '{{ IDM_CLIENT_MINIO }}'].id | [0]"   

- name: Get Client Secret API Access
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_api_access }}/client-secret"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_client_api_access_secret_response

- name: Get Client Secret Grafana
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_grafana }}/client-secret"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_client_grafana_secret_response

- name: Get Client Secret Gravitee
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_gravitee }}/client-secret"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_client_gravitee_secret_response

- name: Get Client Secret Admin Tools
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_admin_tools }}/client-secret"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_client_admin_tools_secret_response

- name: Get Client Secret Masterportal
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_masterportal }}/client-secret"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_client_masterportal_secret_response

- name: Get Client Secret CKAN
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_ckan }}/client-secret"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_client_ckan_secret_response

- name: Get Client Secret MINIO
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_minio }}/client-secret"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_client_minio_secret_response


- name: "Set IDM client secret API Access."
  set_fact:
    IDM_CLIENT_SECRET_API_ACCESS: "{{ keycloak_client_api_access_secret_response.json.value }}"
    cacheable: yes

- name: "Set IDM client secret Grafana."
  set_fact:
    IDM_CLIENT_SECRET_GRAFANA: "{{ keycloak_client_grafana_secret_response.json.value }}"
    cacheable: yes

- name: "Set IDM client secret Gravitee."
  set_fact:
    IDM_CLIENT_SECRET_GRAVITEE: "{{ keycloak_client_gravitee_secret_response.json.value }}"
    cacheable: yes

- name: "Set IDM client secret Admin Tools."
  set_fact:
    IDM_CLIENT_SECRET_ADMIN_TOOLS: "{{ keycloak_client_admin_tools_secret_response.json.value }}"
    cacheable: yes

- name: "Set IDM client secret Masterportal."
  set_fact:
    IDM_CLIENT_SECRET_MASTERPORTAL: "{{ keycloak_client_masterportal_secret_response.json.value }}"
    cacheable: yes

- name: "Set IDM client secret CKAN."
  set_fact:
    IDM_CLIENT_SECRET_CKAN: "{{ keycloak_client_ckan_secret_response.json.value }}"
    cacheable: yes    

- name: "Set IDM client secret MINIO."
  set_fact:
    IDM_CLIENT_SECRET_MINIO: "{{ keycloak_client_minio_secret_response.json.value }}"
    cacheable: yes  

### Following configureation will be skipped if target client already exists

- name: Create API-Access roles
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_api_access }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "{{ item.role }}",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_api_access_response
  when: client_api_access_response.status != 409
  loop:
    - {role: "dataConsumer"}
    - {role: "dataProducer"}
    - {role: "dataAdmin"}

- name: Create Grafana roles
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_grafana }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "{{ item.role }}",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_grafana_response
  when: client_grafana_response.status != 409
  loop:
    - {role: "grafanaAdmin"}
    - {role: "grafanaEditor"}
    - {role: "grafanaViewer"}

- name: Create Gravitee roles
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_gravitee }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "graviteeAdmin",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_gravitee_response
  when: client_gravitee_response.status != 409

- name: Create Admin Tools roles
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_admin_tools }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "adminToolsAdmin",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_admin_tools_response
  when: client_admin_tools_response.status != 409

- name: Create Masterportal roles
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_masterportal }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "masterportalAdmin",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_masterportal_response
  when: client_masterportal_response.status != 409

- name: Create CKAN roles
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_ckan }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "ckanAdmin",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_ckan_response
  when: client_ckan_response.status != 409

- name: Create MINIO roles 1/4
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_minio }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "minioAdmin",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_minio_response
  when: client_minio_response.status != 409

- name: Create MINIO roles 2/4
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_minio }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "minioPolicyReadWrite",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_minio_response
  when: client_minio_response.status != 409

- name: Create MINIO roles 3/4
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_minio }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "minioPolicyWrite",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_minio_response
  when: client_minio_response.status != 409

- name: Create MINIO roles 4/4
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_minio }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "minioPolicyRead",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201
  register: roles_minio_response
  when: client_minio_response.status != 409  
