---
# file: 03_setup_k8s_platform/deploy_frost_playbook.yml

- name: Deploy FROST Server
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Read default values
      ansible.builtin.include_vars:
        file: default.yml
        name: default

    - name: Read FROST server values
      ansible.builtin.include_vars:
        file: frost_frost.yml
        name: frost

    - name: Read FROST PostGIS values
      ansible.builtin.include_vars:
        file: frost_postgis.yml
        name: postgis

    - name: Set default facts for K8S
      ansible.builtin.set_fact:
        k8s_config: "{{ default.K8S_KUBECONFIG }}"
        k8s_context: "{{ default.K8S_CONTEXT }}"
        k8s_namespace: "{{ default.K8S_NAMESPACE_FROST }}"

    - name: Set facts for ChartMuseum
      ansible.builtin.set_fact:
        cm_port: "{{ default.CM_PORT }}"
        cm_storage: "{{ default.CM_STORAGE }}"
        cm_storage_local_rootdir: "{{ default.CM_STORAGE_LOCAL_ROOTDIR }}"
        cm_context_path: "{{ default.CM_CONTEXT_PATH }}"
        helm_repo_url: "{{ default.HELM_REPO_URL }}"
        helm_repo_name: "{{ default.HELM_REPO_NAME }}"

    - name: Set facts for FROST Helm chart
      ansible.builtin.set_fact:
        frost_helm_repo_name: "{{ frost.HELM_REPO_NAME }}"
        frost_helm_repo_url: "{{ frost.HELM_REPO_URL }}"
        frost_helm_chart_name: "{{ frost.HELM_CHART_NAME }}"
        frost_helm_release_name: "{{ frost.HELM_RELEASE_NAME }}"

    - name: Add FROST Helm repo
      community.kubernetes.helm_repository:
        name: "{{ frost_helm_repo_name }}"
        url: "{{ frost_helm_repo_url }}"

    - name: Read PostgreSQL operator values
      ansible.builtin.include_vars:
        file: postgres_operator.yml
        name: postgres

    - name: Set facts for FROST PostGIS (Zalondo operator)
      ansible.builtin.set_fact:
        file: frost_postgis
        name: postgis

    - name: "Create namespace {{ k8s_namespace }}"
      community.kubernetes.k8s:
        state: present
        kubeconfig: "{{ k8s_config }}"
        context: "{{ k8s_context }}"
        definition:
          api_version: v1
          kind: Namespace
          metadata:
            name: "{{ k8s_namespace }}"
            labels:
              name: "{{ k8s_namespace }}"

    - name: Install Helm package with values loaded from template
      community.kubernetes.helm:
        name: "{{ frost_helm_release_name }}"
        chart_ref: "{{ frost_helm_repo_name }}/{{ frost_helm_chart_name }}"
        kubeconfig: "{{ k8s_config }}"
        context: "{{ k8s_context }}"
        release_namespace: "{{ k8s_namespace }}"
        update_repo_cache: true
        create_namespace: false
        values: "{{ lookup('template', 'templates/frost/frost_values.yaml.j2') | from_yaml }}"

    - name: Remove Deployment frost-server-frost-server-db
      community.kubernetes.k8s:
        state: absent
        wait: yes
        kubeconfig: "{{ k8s_config }}"
        context: "{{ k8s_context }}"
        namespace: "{{ k8s_namespace }}"
        api_version: v1
        kind: Deployment
        name: frost-server-frost-server-db

    - name: Remove Service frost-server-frost-server-db
      community.kubernetes.k8s:
        state: absent
        wait: yes
        kubeconfig: "{{ k8s_config }}"
        context: "{{ k8s_context }}"
        namespace: "{{ k8s_namespace }}"
        api_version: v1
        kind: Service
        name: frost-server-frost-server-db

    - name: Deploy PostGIS server for FROST via Zalando operator
      community.kubernetes.k8s:
        state: present
        namespace: "{{ default.K8S_NAMESPACE_DATA_MANAGEMENT }}"
        kubeconfig: "{{ k8s_config }}"
        context: "{{ k8s_context }}"
        definition:
          kind: "postgresql"
          apiVersion: "acid.zalan.do/v1"
          metadata:
            name: "{{ postgis.cluster_team }}-{{ postgis.cluster_name }}"
            namespace: "{{ k8s_namespace }}"
            labels:
              team: "{{ postgis.cluster_team }}"
          spec:
            teamId: "{{ postgis.cluster_team }}"
            postgresql:
              version: "11"
            numberOfInstances: 2
            enableMasterLoadBalancer: true
            volume:
              size: "20Gi"
            users:
              sensorthings: []
            databases:
              sensorthings: "sensorthings"
            allowedSourceRanges:
              # IP ranges to access your cluster go here
            resources:
              requests:
                cpu: 100m
                memory: 100Mi
              limits:
                cpu: 500m
                memory: 500Mi

    - name: Create PostGIS extension
      block:
        - name: _Create PostGIS extension_ Try cluster-0 resource
          command: |
            kubectl --kubeconfig {{ k8s_config }} -n {{ k8s_namespace }}
              exec {{ postgis.cluster_team }}-{{ postgis.cluster_name }}-0
              -- bash -c "psql -U {{ postgres.super_username }} -d {{ frost.frost_db_database }} -c 'CREATE EXTENSION IF NOT EXISTS postgis;'"
          register: result
          until: result.rc == 0
          retries: 5
          delay: 20
          changed_when: True
      rescue:
        - name: _Create PostGIS extension_ Try cluster-1 resource
          command: |
            kubectl --kubeconfig {{ k8s_config }} -n {{ k8s_namespace }}
              exec {{ postgis.cluster_team }}-{{ postgis.cluster_name }}-1
              -- bash -c "psql -U {{ postgres.super_username }} -d {{ frost.frost_db_database }} -c 'CREATE EXTENSION IF NOT EXISTS postgis;'"
          register: result
          until: result.rc == 0
          retries: 5
          delay: 20
          changed_when: True

    - name: Get password of user sensorthings, created by Zalando operator
      community.kubernetes.k8s_info:
        kubeconfig: "{{ k8s_config }}"
        context: "{{ k8s_context }}"
        namespace: "{{ k8s_namespace }}"
        kind: Secret
        name: "sensorthings.frost-server-frost-server-db.credentials.postgresql.acid.zalan.do"
      register: sensorthings_db_password

    - name: Update password in Secret frost-server-frost-server
      community.kubernetes.k8s:
        kubeconfig: "{{ k8s_config }}"
        context: "{{ k8s_context }}"
        namespace: "{{ k8s_namespace }}"
        definition:
          kind: Secret
          api_version: v1
          metadata:
            name: "frost-server-frost-server"
            namespace: "{{ k8s_namespace | lower }}"
          data:
            db.password: "{{ sensorthings_db_password['resources'][0]['data']['password'] }}"
            db.username: "{{ frost.frost_db_username | b64encode }}"
        state: present
        apply: yes

    - name: Get Pod running FROST Server component http
      community.kubernetes.k8s_info:
        kubeconfig: "{{ k8s_config }}"
        context: "{{ k8s_context }}"
        namespace: "{{ k8s_namespace }}"
        kind: Pod
        label_selectors:
          - app.kubernetes.io/instance=frost-server
          - app=frost-server
          - component=http
      register: frost_server_http_pod_info

    - name: Get name of Pod running FROST Server component http
      ansible.builtin.set_fact:
        frost_server_http_pod_name: "{{ frost_server_http_pod_info['resources'][0]['metadata']['name'] }}"
      when: frost_server_http_pod_info is defined

    - name: Restart Pod  running FROST Server component http
      ansible.builtin.shell: |
        kubectl --kubeconfig="{{ k8s_config }}" --namespace "{{ k8s_namespace | lower }}" delete pod "{{ frost_server_http_pod_name }}"
      args:
        executable: /bin/bash
      when: frost_server_http_pod_name is defined

    - name: Pause one minute to wait until Pod has been restarted
      pause:
        minutes: 1
