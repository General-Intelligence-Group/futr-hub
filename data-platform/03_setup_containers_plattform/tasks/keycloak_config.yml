---
# Start configuring keycloak

- name: "Wait for Keycloak to come up"
  uri:
    url: "https://idm.{{ DOMAIN }}/auth"
    status_code: 200
  register: result
  until: result.status == 200
  retries: 50
  delay: 2

- name: Keycloak Login and get token
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/realms/{{ KEYCLOAK_REALM_MASTER }}/protocol/openid-connect/token"
    return_content: yes
    body_format: form-urlencoded
    body:
        grant_type: "password"
        client_id: "admin-cli"
        username: "admin@{{ DOMAIN }}"
        password: "{{ SC_ADMIN_PASSWORD }}"
    status_code: 200
  register: keycloak_login

- name: Create main realm
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/create_realm.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: realm

- name: Error when realm exists
  debug:
    msg: "Failed. Main realm already existing?"
  when: realm.status == 409


- name: Create Client
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/create_client.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: keycloak_client_response

- name: Error when client exists
  debug:
    msg: "Failed. Client already existing?"
  when: realm.status == 409

- name: Get clients
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: clients

- name: "Set client ID."
  set_fact:
    client_id: "{{ clients.json | json_query(query) }}"
  vars:
    query: "[?clientId== '{{ IDM_CLIENT }}'].id | [0]"

- name: Get Client Secret
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id }}/client-secret"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_client_secret_response

# - name: Show IDM Client Secret
#   debug:
#    var: keycloak_client_secret_response.json.value

- name: "Set IDM client secret."                                                            # noqa var-naming
  set_fact:
    IDM_CLIENT_SECRET: "{{ keycloak_client_secret_response.json.value }}"         
    cacheable: yes

- name: Get OIDC Values
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/realms/{{ IDM_REALM }}/.well-known/openid-configuration"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_oidc_response

- name: "Set IDM endpoint urls."                                                            # noqa var-naming
  set_fact:
    IDM_ENDP_AUTHORIZE: "{{ keycloak_oidc_response.json.authorization_endpoint }}"
    IDM_ENDP_TOKEN: "{{ keycloak_oidc_response.json.token_endpoint }}"
    IDM_ENDP_TOKEN_INTROSPECT: "{{ keycloak_oidc_response.json.introspection_endpoint }}"
    IDM_ENDP_USER_INFO: "{{ keycloak_oidc_response.json.userinfo_endpoint }}"
    IDM_ENDP_USER_LOGOUT: "{{ keycloak_oidc_response.json.end_session_endpoint }}"
    IDM_ENDP_ISSUER: "{{ keycloak_oidc_response.json.issuer }}"
    cacheable: yes

- name: Create User
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/create_user.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: keycloak_user_response

- name: "User already existing."
  debug:
    msg: "Failed. User admin@{{ DOMAIN }} already existing?"
  when: keycloak_user_response.status == 409


- name: Set Password for User
  uri:
    method: PUT
    url: "{{ keycloak_user_response.location }}/reset-password"
    return_content: yes
    body_format: json
    body: |
        { "type":"password",
          "value":"{{ SC_ADMIN_PASSWORD }}",
          "temporary":false}
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_user_response.status != 409

- name: Get users
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: users

- name: "Set user id."
  set_fact:
    user_id: "{{ users.json | json_query(query) }}"
  vars:
    query: "[?username== 'admin@{{ DOMAIN }}'].id | [0]"

- name: Create adminTech Role
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id }}/roles"
    return_content: yes
    body_format: json
    body: |
      {
        "name": "{{ item.role }}",
        "composite": false,
        "clientRole": true
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: create_roles
  loop:
    - {role: "adminContent"}
    - {role: "dataProducer"}
    - {role: "dataConssumer"}
    - {role: "adminTech"}

- name: Get roles
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id }}/roles"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: roles

- name: "Set role id."
  set_fact:
    role_id: "{{ roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'adminTech'].id | [0]"

- name: Assign Roles to User
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ user_id }}/role-mappings/clients/{{ client_id }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ role_id }}",
        "name": "adminTech",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204

# Ensure keycloak gatekeeper is working

- name: Create new Client Scope
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/client-scopes"
    return_content: yes
    body_format: json
    body: |
      { "attributes": {
          "display.on.consent.screen":"true",
          "include.in.token.scope":"true"
          },
          "name":"keycloak-gatekeeper",
          "description":"Help connecting",
          "protocol":"openid-connect"
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: keycloak_client_scope_response

- name: Get client scopes
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/client-scopes"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: client_scopes

- name: "Set client scope id."
  set_fact:
    client_scope_id: "{{ client_scopes.json | json_query(query) }}"
  vars:
    query: "[?name== 'keycloak-gatekeeper'].id | [0]"

- name: Create new Client Scope Mapper
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/client-scopes/{{ client_scope_id }}/protocol-mappers/models"
    return_content: yes
    body_format: json
    body: |
      { "protocol":"openid-connect",
        "config": {
          "id.token.claim":"true",
          "access.token.claim":"true",
          "included.client.audience":"{{ IDM_CLIENT }}" },
        "name":"gatekeeper-mapper",
        "protocol": "openid-connect",
        "protocolMapper":"oidc-audience-mapper"
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409

- name: Assign Client Scope Mapper
  uri:
    method: PUT
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id }}/default-client-scopes/{{ client_scope_id }}"
    return_content: yes
    body_format: json
    body: |
      { "realm":"{{ IDM_REALM }}",
        "client":"{{ client_id }}",
        "clientScopeId":"{{ client_scope_id }}"
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204

# Ensure Grafana is working

- name: Get Client Scopes
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/client-scopes"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: keycloak_all_client_scopes

- name: "Det keycloak_client_scope_id."
  set_fact:
    keycloak_client_scope_id: "{{ keycloak_all_client_scopes.json | json_query(client_scope_id_query) }}"
  vars:
    client_scope_id_query: "[?name=='roles'].id"

- name: "Det keycloak_roles_protocol_mappers."
  set_fact:
    keycloak_roles_protocol_mappers: "{{ keycloak_all_client_scopes.json | json_query(mappers_query) }}"
  vars:
    mappers_query: "[?name=='roles'].protocolMappers[]"

- name: "Det keycloak_roles_protocol_mapper."
  set_fact:
    keycloak_roles_protocol_mapper: "{{ keycloak_roles_protocol_mappers | json_query(protocol_mapper_query) }}"
  vars:
    protocol_mapper_query: "[?protocolMapper=='oidc-usermodel-client-role-mapper']"

- name: "Det keycloak_client_client_role_mapper_id."
  set_fact:
    keycloak_client_client_role_mapper_id: "{{  keycloak_roles_protocol_mapper[0].id }}"

# - debug:
#     var: keycloak_client_client_role_mapper_id

- name: Change the Client Role Mapper
  uri:
    method: PUT
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/client-scopes/{{ keycloak_client_scope_id[0] }}/protocol-mappers/models/{{ keycloak_client_client_role_mapper_id }}"  # noqa 204
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'keycloak/patch_client_role_mapper.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204

# Ensure min.io is working

- name: Create new Client Mapper
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id }}/protocol-mappers/models/"
    return_content: yes
    body_format: json
    body: |
      { "name":"min.io",
        "protocol":"openid-connect",
        "protocolMapper":"oidc-usermodel-attribute-mapper",
        "consentRequired":"false",
        "config":{
          "userinfo.token.claim":"true",
          "user.attribute":"minio_policy",
          "id.token.claim":"true",
          "access.token.claim":"true",
          "claim.name":"policy",
          "jsonType.label":"String",
          "multivalued":"",
          "aggregate.attrs":""
          }
      }
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409

