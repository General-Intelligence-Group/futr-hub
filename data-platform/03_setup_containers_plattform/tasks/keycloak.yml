---
- name: Create private keycloack-db network
  docker_network:
    name: idm
    driver: bridge
    state: present

- name: Create volume keycloack_postges_data
  docker_volume:
    name: keycloack_postges_data

- name: Deploy Postgres for Keycloak
  docker_container:
    name: "{{ KEYCLOAK_POSTGRES_HOST }}"
    image: postgres:13.2-alpine
    env:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: "{{ KEYCLOAK_POSTGRES_USER }}"
      POSTGRES_PASSWORD: "{{ KEYCLOAK_POSTGRES_PASSWORD }}"
      POSTGRES_DB: "{{ KEYCLOAK_POSTGRES_DB }}"
      POSTGRES_HOST: "{{ KEYCLOAK_POSTGRES_HOST }}"
    restart_policy: always
    volumes:
      - keycloack_postges_data:/var/lib/postgresql/data
    networks:
      - name: "idm"
    networks_cli_compatible: yes
    purge_networks: yes
    network_mode: "idm"
    state: started
    labels:
      com.docker.compose.project: "idm"

- name: Deploy Keycloak
  docker_container:
    name: keycloak
    image: jboss/keycloak:12.0.4
    env:
      DB_VENDOR: "postgres"
      DB_ADDR: "{{ KEYCLOAK_POSTGRES_HOST }}"
      DB_PORT: "5432"
      DB_DATABASE: "{{ KEYCLOAK_POSTGRES_DB }}"
      DB_USER: "{{ KEYCLOAK_POSTGRES_USER }}"
      DB_PASSWORD: "{{ KEYCLOAK_POSTGRES_PASSWORD }}"
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_HOSTNAME: "idm.{{ DOMAIN }}"
      # KEYCLOAK_LOGLEVEL: DEBUG
      JGROUPS_DISCOVERY_PROTOCOL: "JDBC_PING"
      JGROUPS_DISCOVERY_PROPERTIES: 'datasource_jndi_name=java:jboss/datasources/KeycloakDS,info_writer_sleep_time=500,initialize_sql="CREATE TABLE IF NOT EXISTS JGROUPSPING ( own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created timestamp default current_timestamp, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))"'  # noqa 204
    restart_policy: always
    volumes:
      - keycloack_postges_data:/var/lib/postgresql/data
    networks:
      - name: "idm"
      - name: "public"
    networks_cli_compatible: yes
    purge_networks: yes
    network_mode: "public"
    state: started
    labels:
      com.docker.compose.project: "idm"
      traefik.enable: "true"
      traefik.docker.network: "public"
      # Keycloak
      traefik.http.routers.keycloak.rule: "Host(`idm.{{ DOMAIN }}`)"
      traefik.http.routers.keycloak.entrypoints: "websecure"
      traefik.http.routers.keycloak.service: "keycloak"
      traefik.http.routers.keycloak.tls: "true"
      traefik.http.routers.keycloak.tls.certresolver: "le"
      traefik.http.services.keycloak.loadbalancer.server.port: "8080"
      traefik.http.services.keycloak.loadbalancer.passHostHeader: "true"

- name: "Wait for Keycloak to come up"
  uri:
    url: "https://idm.{{ DOMAIN }}/auth"
    status_code: 200
  register: result
  until: result.status == 200
  retries: 50
  delay: 2

- name: Create admin account
  command: docker exec keycloak /opt/jboss/keycloak/bin/add-user-keycloak.sh -u "admin@{{ DOMAIN }}" -p "{{ SC_ADMIN_PASSWORD }}"
  register: result
  changed_when: "'restart server to load user' in result.stdout"
  failed_when: "(not 'restart server to load user' in result.stdout) and (not 'already added' in result.stderr)"

- name: Restart keycloak
  command: docker restart keycloak
  when: "(not 'restart server to load user' in result.stdout) and (not 'already added' in result.stderr)"
